import json
from utils import *

class Classifier:
    def __init__(self, acceptable:int = 50):
        """Return the classifier class.

        Args:
            acceptable (int, optional): Acceptable percentage of similarity.
        """
        self.acceptable = acceptable
        self.similarities = []
    
    def predict(self, patterns:dict, input:set):
        """Process patterns and check input similarities.

        Args:
            patterns (dict): Patterns generated by `trainer.py`.
            input (set): Input processed by `simpleclassifier.processText`.

        Returns:
            Boolean/Tuple: Returns a tuple with the probable answer and similarity.
        """

        # -=-=-=-=-=-=-=-==-== Filtering -==-=-=-=-=-=-=-=-==-=-=-==-
        for action in patterns:
            self.similarities.append((action, 0))
            i = len(self.similarities)-1
            for pattern in patterns[action]:
                similarity = process_similarity(input, pattern)
                if similarity >= self.acceptable and similarity > self.similarities[i][1]:
                    self.similarities[i] = (action, similarity)
                elif similarity == 1.0:
                    break
            if not self.similarities[i][1]:
                self.similarities.pop(i)

        # -=-=-=-==-==-=-=-=-=-=- Predict =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        probably = False
        if len(self.similarities) > 1:
            for i, action in enumerate(self.similarities):
                if not probably or self.similarities[i][1] > probably[1]:
                    probably = action
        elif len(self.similarities) == 1:
            probably = self.similarities[0]

        return probably

class Trainer:
    def __init__(self):
        """Return the trainer class.
        """
        self.patterns = {}
    
    def add_pattern(self, action:str, pattern:str):
        """Register the pattern in a key with the action name

        Args:
            action (str): The action is the entity responsible for the pattern.
            pattern (str): The pattern to be used as a base.
        """
        pattern = list(processText(pattern))
        if not action in self.patterns:
            self.patterns[action] = []
        self.patterns[action].append(pattern)
    
    def save_patterns(self, directory:str = "base.json"):
        """Save the patterns in a json file.

        Args:
            directory (str, "base.json"): Directory to save.
        """
        with open(directory, "w", encoding="utf8") as f:
            json.dump(self.patterns, f, ensure_ascii=False)